Title: Resizable flex layout with drag and drop


Even though everything has been about mobile for quite a while now, there are still developers like me who care more
about desktop applications. So this post is going to be

The purpose of this article is to show you the power of HTML5 for application development, particularly the flexible box layout.
It is is currently my favorite feature, not only because its so genially designed, but also because it solves so many problems I have struggled with when developing GUI's, be it forms, application or webpage layouts.
 The user will be able to drag and drop panes around to completely rearrange or and create a new application layout which suits them the best.
 To see what I mean, have a look at the demo. You can drag each pane around and drop it in a new location. Readers familiar
 with Adobe Bridge or Adobe

Not surprisingly, jQuery has been the choice for many of Mozilla's developrers. But in this article we are going to use the dojotoolkit instead
since I'm a big fan of it and because in my opinion it's better suited for larger web applications.

Idea is to let the browser do the calculating of width and height when distributing space for containers by using flexbox.

We will make use of the following web technologies: css transitions, flexbox layout, dojo toolkit (no, for once its' not jQuery ;-), drag n drop
css variables.

I tried to follow some guidelines: only DOM factories, no js classes. I avoided storing any app state information in object properties, because
that would get lost on reload/close and require keeping track of state. Instead I use the DOM to store the state, which will
allow to just export the html as string and store it on the server or in indexedDB, where it can be restored from on page load to
get the exact layout back.

1.
Lets start with our initial application layout. It is made up of a header, main and footer element. The main contains our
base elements contentPane (show image). Are layed out in a flexbox layout see article...

I find it hard to remember, that flex-direction column means the stretching not the result of the child items. refers to the flex-direction not the result (child items)

Each base element is div element of class contentPane and consists of a header and a section element.

Dropping within a contentPane means splitting into two (implemented as insert parent and insertBefore/after), dropping between (above, below, left right) insert new contentPane

We add three divs to display possible drop targets within the contentPane, we also add put them in a paneContainer to be able to implement the insert later.

Nest lets add the transition to depict a potential drop target when dragging on hover
show bow-shadow transition only after start of drag by adding the corresponding class

2.
In the next step we add the vertical separators, which later will allow the user to resize the contentPanes, they also serve as a dropping target


-split column into two rows and add a row divider
- use event delegation, which is convenient when creating a new pane, since you do not have to call initEvents again to attach event to new pane :-)


- put overlay into its own container, which lets us use flexbox too, so the middle overlay always has the right hight or width, independent of the existence of an overly top or bottom (left/right)
- which type of overlay (middleTopBottom, middleTop, middleBottom, middle, middleLeftRight, middleLeft, middleRight) is created, depends on how many siblings there are and if we are first or last or only contentPane


-to keep things simple and to not let the user loos oversight, column containers can only be split into rows, and row containers only into columns. this allows us to only have to types of overlays:
middleOverlay and edgeOverlay. in a colContainer (flex-direction row) the edgeOverlay aligns horizontal, in a rowContainer it allows vertical, the middle uses up the remaining space.

css class purposes:
overlayContainer: place overlays middle left top right bottom according to flexbox direction


flexbox has the advantage that the browser takes care of resizing all the containers for you. This is especially useful
in case of nested containers, since you would have to calculate width/heights for all these at hte time of dragging


problem when setting the height/width of the node paires left - right or top - bottom when resizing/dragging with a divider:
	First lets make a simple layout example.
	One container split horizontally into two and the lower split again horizontally. Now lets draw the first divider. After setting the dim of the first node, the browser redistributes the space and we end up with reading a wrong
	dim for the second node, e.g. we have height of node 1 = 518 and height of second node is 559. use get computed to read height of 518px and set it to 518px, this lets the browser redistribute (because of flextbox)
	to 759px and then the second reads as 317.5px. After setting the lower to 318 the browser redistributes space again and we end up with
	a real 638 to 428, but styles set to 518 to 318px! The trick is to turn of flexbox first, then set the two dims and the turn it back on.
	we need to do this for all parent node's children, it can be more than just a pair ,e.g 3 columns or 5 rows, etc...



dnd splitting/overlay rules: show vertical overlays in horizontal and vice versa

note: having the overlays as the first children of a contentPane and the sections as the last, lets us just append a new child section when dropping


one big advantage of event delegation is that after initializing all your events you don't have to reapply them to elements created after that! :-)



note: you can't directly dnd dom nodes, you have to serialize it first (innerHTML)


-- insertNew()
- so far we only used the DOM and not any object/classes. The only exception are the dividers. This leads to one problem when inserting a new
pane. The sibling divider needs to be adpated to the new neighbours, but how do we find it since we cannot use a node? We need to store a reference, either anonymously (delete all)
or we use an identifier to delete a specific divider.

I think this is a great example of the beauty of the flexbox layout. All I have to do to change and overlay from column type to row type is the flex-direction property


a paneContainer serves to layout the children (contentPanes) as rows or columns
an overlayContainer is used to display drop target on mouse over

DOM structure:
- a contentPane can only have contentPane(s) and/or paneContainers and/ord paneDivider(s) as siblings
- a contentPane can only have a paneContainer as a parent
- a paneContainer can only have paneContainer as a parent except for the last <main> element which is only a row or colContainer


- you can't just set the width/height of all panes instead of only using siblings and parent's siblings.
 If you dragged a divider that has child panes with a fixed width/height they wouldn't automatically adapt to the parent's new size.
 This is also a good argument to use flexbox, the browser autom resize child panes for you!